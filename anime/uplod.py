from github import Github
import base64
import os

# بيانات المستخدم
access_token = "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"
repo_name = "abdo12249/1"
local_folder_path = "D:/script/creat HTMAL"
upload_base_path = "anime"  # المجلد داخل الريبو

# الاتصال بـ GitHub
g = Github(access_token)
repo = g.get_repo(repo_name)

# الوظيفة لرفع الملفات
def upload_file(local_path, remote_path):
    with open(local_path, "rb") as f:
        content = f.read()
        encoded = base64.b64encode(content).decode()

    try:
        contents = repo.get_contents(remote_path, ref="main")
        repo.update_file(remote_path, "تحديث الملف عبر Python", encoded, contents.sha, branch="main")
        print(f"✅ تحديث: {remote_path}")
    except:
        repo.create_file(remote_path, "رفع ملف جديد عبر Python", encoded, branch="main")
        print(f"✅ رفع جديد: {remote_path}")

# المرور على كل الملفات داخل المجلد المحلي
for root, dirs, files in os.walk(local_folder_path):
    for file in files:
        full_local_path = os.path.join(root, file)

        # تحويل المسار المحلي إلى نسبي ثم إلى GitHub-style path
        relative_path = os.path.relpath(full_local_path, local_folder_path)
        remote_path = f"{upload_base_path}/{relative_path}".replace("\\", "/")

        upload_file(full_local_path, remote_path)
